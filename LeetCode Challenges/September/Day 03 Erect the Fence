
package first;
import static java.lang.System.exit;
import java.lang.reflect.Array;
import java.util.*;


class Solution2 {
    
    public static int crossProduct(int p[], int q[], int r[]){
         return (((q[1]-p[1])*(r[0]-q[0])) - ((q[0]-p[0])*(r[1]-q[1])));
    }
 
     public static boolean dist(int p[], int i[], int q[]){
         boolean a = i[0]>=p[0] && i[0]<=q[0] || i[0]<=p[0] && i[0]>=q[0];
         boolean b = i[1]>=p[1] && i[1]<=q[1] || i[1]<=p[1] && i[1]>=q[1];
         return a&&b;
     }
     
     public static int[][] outerTrees(int[][] trees) {
         if(trees.length<4) return trees;
         HashSet<int[]> hs = new HashSet<>();
         int left_most = 0;
         for(int i=0;i<trees.length;i++) if(trees[i][0]<trees[left_most][0]) left_most = i;
         int p = left_most;
         do{
             int q = (p+1)%trees.length;
             for(int i=0;i<trees.length;i++) if(crossProduct(trees[p], trees[i], trees[q])<0) q = i;
             
             for(int i=0;i<trees.length;i++) 
                 if(i!=p && i!=q && crossProduct(trees[p], trees[i], trees[q])==0 && dist(trees[p], trees[i], trees[q]))
                     hs.add(trees[i]);
             hs.add(trees[q]);
             p = q; 
         }while(p!=left_most);
         return hs.toArray(new int[hs.size()][]);
    }
    
    
   
    
    public static void main(String agrs[]){
        
        int[][] arr2 = {{1,1}, {2,2}, {2,0}, {2,4}, {3,3}, {4,2}};
        int[][] arr = outerTrees(arr2);
        for(int[] a:arr){
          for(int i=0;i<a.length;i++) System.out.print(a[i]);
          System.out.println();
        }
    }
}
