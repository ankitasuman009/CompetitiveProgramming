class Solution {
        
    public int numFactoredBinaryTrees(int[] arr) {
       int n = arr.length;
        for(int i=0;i<arr.length-1;i++){
            int k = i;
            for(int j=i+1;j<arr.length;j++)
                if(arr[k]>arr[j]) k = j;
            if(k!=i){
                int temp = arr[k];
                arr[k] = arr[i];
                arr[i] = temp;
            }
        }
        for(int i=arr.length-1;i>0;i--){
            int num1 = arr[i];
            List<Integer> list1 = new ArrayList<Integer>();
            for(int j=i-1;j>=0;j--)
                if(num1%arr[j]==0)
                    list1.add(arr[j]); 
            if(list1.size()==1 && (list1.get(0)*list1.get(0)==num1)) n++;
            else if(list1.size()>1){
                 for(int k=0;k<list1.size();k++)
                    for(int l=0;l<list1.size();l++)
                        if(list1.get(k)*list1.get(l)==num1) n++;
            }
        } 
        return n;
    }
}
