class Solution {
    public int max(int a, int b){
        return a>b?a:b;
    }
    
    public int lcs(char[] X, char[] Y, int m, int n) {
        // if(m==0 || n==0) return 0;
        // if(text1.charAt(m-1)==text2.charAt(n-1)) return  1 + lcs(text1, text2, m-1, n-1);
        // else return max(lcs(text1, text2, m-1, n), lcs(text1, text2, m, n-1));
        int L[][] = new int[m+1][n+1];
        for (int i=0; i<=m; i++){
            for (int j=0; j<=n; j++){
                if (i == 0 || j == 0)
                    L[i][j] = 0; 
                else if (X[i-1] == Y[j-1]) 
                    L[i][j] = L[i-1][j-1] + 1;
                else
                    L[i][j] = max(L[i-1][j], L[i][j-1]);
            }
        }
        return L[m][n];
    }
    
    public int longestCommonSubsequence(String text1, String text2) {
        return lcs(text1.toCharArray(), text2.toCharArray(), text1.length(), text2.length());
    }
}
