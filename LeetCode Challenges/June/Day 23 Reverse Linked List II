
package first;
import java.text.DecimalFormat;
import java.util.*;

class ListNode {
      int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 }

class Solution2 {
    
    public static void display(ListNode t){
        while (t != null) {
            System.out.println(t.val);
            t = t.next;
        }
    }
    
  public static ListNode reverseBetween(ListNode head, int left, int right) {
      if(head==null) return null;
      if(head.next==null) return head;
      int arr[] = new int[500];
      ListNode t = head;
      int n = 0;
      while (t != null) {
            arr[n++] = t.val;
            t = t.next;
        }
          ListNode newNode = new ListNode();
            ListNode temp = newNode;
            ListNode temp2 = null;
          for(int i=0;i<left-1;i++){
              newNode = new ListNode(arr[i]);
            temp.next = newNode;
            temp = newNode;
            if(i==0) temp2 = newNode;
            }
      for(int j=right-1;j>=left-1;j--){
          ListNode newNode2 = new ListNode(arr[j], null);
            temp.next = newNode2;
            temp = newNode2;
            if(temp2==null) temp2 = newNode2;
      }
      for(int k=right;k<n;k++){
          ListNode newNode2 = new ListNode(arr[k], null);
            temp.next = newNode2;
            temp = newNode2;
      }
      return temp2;  
    }
    
    
    
    
    public static void main(String agrs[]){
//        Solution2 obj = new Solution2();
        int n = new Scanner(System.in).nextInt();
        ListNode head = null, temp = null;
        int num = new Scanner(System.in).nextInt();
        ListNode newNode = new ListNode(num, head);
        temp = newNode;
        head = newNode;
        for(int i=1;i<n;i++){
            int num2 = new Scanner(System.in).nextInt();
            ListNode newNode2 = new ListNode(num2, null);
            temp.next = newNode2;
            temp = newNode2;
        }
        display(reverseBetween(head, 1, 4));

    }
}
